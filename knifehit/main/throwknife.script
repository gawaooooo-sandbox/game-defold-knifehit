local function fallOutComplete(self)
	print("throwknife fallOutComplete")

	self.fallOut = false
	self.canThrow = true
	self.angle = 0
	go.set_rotation(vmath.quat_axis_angle(vmath.vector3(0, 0, 1), math.rad(self.angle)))
	go.set_position(self.firstPosition)
end

local function fallOut(self)
	print("throwknife fallout")
	-- mawarinagara otiruno muzui kamo
	--go.animate(".", "euler.z", go.PLAYBACK_ONCE_FORWARD, -360, go.EASING_LINEAR, 1, 0, fallOutComplete)
	self.fallOut = true
	go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, -300, go.EASING_LINEAR, 0.5, 0, fallOutComplete)
end

local function throwComplete(self)
	print("call throw complete")

	--print(go.get("/target", "angle"))
	-- check hit
	msg.post("main#script", "test", {angle = self.angle})

	-- reset canThrow, resetKnifePosition

	-- test
	fallOut(self)
	
end

local function throw(self)
	print("local Throw function")

	-- get target position, width
	-- move to target position
	-- tween??

	go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, self.targetPosition.y - self.targetHeight / 2, go.EASING_LINEAR, 0.1, 0, throwComplete)
end

function init(self)
	-- Add initialization code here
	-- Remove this function if not needed

	self.speed = 1
	self.angle = 0
	self.canThrow = true
	self.fallOut = false
	self.direction = vmath.vector3(0, 0, 0)
	self.firstPosition = go.get_position()
	self.targetPosition = go.get_position("/target")
	self.targetHeight = go.get("target#sprite", "size.y")
	self.knifeHeight = go.get("#sprite", "size.y")

	print(go.get_scale())
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
	-- click sarete, nife ga nageraretara position wo henkou velocity nanda-
--[[
	if self.canThrow == false then
		self.direction.y = self.speed
		go.set_position(go.get_position() + self.direction * dt)
	end
	]]

	--print(go.get_position())

	-- fall out
	if self.fallOut == true then
		self.angle = self.angle - 600 * dt
		go.set_rotation(vmath.quat_axis_angle(vmath.vector3(0, 0, 1), math.rad(self.angle)))
	end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
	if self.canThrow == true then
		if message_id == hash("throw") then
			self.canThrow = false
			print("Throw!!!!")

			throw(self)
		end
	end

	if message_id == hash("fall") then
		print("throwknife fall out")
		fallOut(self)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
