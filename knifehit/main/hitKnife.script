function init(self)
	-- Add initialization code here
	-- Remove this function if not needed
	print("call hitknife init")
	self.rotationSpeed = 150
--	print(go.get_position())
--	print(go.get_rotation())

	self.targetAngle = -90
	self.angle = 0

--	local position = go.get_position()
--	local distance_to_target = vmath.length(target - position)
--	local direction = vmath.normalize(target - position)
--	local ortho_dir = vmath.rotate(vmath.quat_rotation_z(math.rad(90)), direction)


	self.targetPosition = go.get_position("/target")
	self.targetPositionX = go.get("/target", "position.x")
	self.targetPositionY = go.get("/target", "position.y")
--	print(self.targetPositionX)
	
	self.targetWidth = go.get("/target#sprite", "size.x")
	self.targetHeight = go.get("/target#sprite", "size.y")
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed	
end

--[[
local targetX, targetY = target:getPosition();	 
local x = targetWidth / 2 * math.cos(rad) + targetX
local y = targetHeight / 2 * math.sin(rad)  + targetY
self:setPosition(x, y)
]]

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed

	self.targetAngle = self.targetAngle - self.rotationSpeed * dt
	local rad = math.rad(self.targetAngle)

	local x = self.targetWidth / 2 * math.cos(rad) + self.targetPositionX
	local y = self.targetHeight / 2 * math.sin(rad) + self.targetPositionY
	local vec = vmath.vector3(x, y, 0)
	go.set_position(vec)

	self.angle = self.angle - self.rotationSpeed * dt
	local knifeRad = math.rad(self.angle)	
	go.set_rotation(vmath.quat_axis_angle(vmath.vector3(0, 0, 1), knifeRad))

	
	-- move knifes
	--for knife,_ in pairs(self.knifes) do
	--	local pos = go.get_position(knife)
		--pos = pos + vmath.vector3(0, -self.speed * dt, 0)
		--go.set_position(pos, knife)
		--if pos.y <= -50 then
		--	go.delete(coin)
		--	self.knifes[knife] = nil
		--end
	--end

--[[ throw knife to no collision check hitai
	for coin,_ in pairs(self.coins_to_collect) do
		local coin_pos = go.get_position(coin)
		local delta = player_pos - coin_pos
		go.set_position(coin_pos + delta * 5 * dt, coin)
		if vmath.length(delta) < 30 then
			go.delete(coin)
			self.coins_to_collect[coin] = nil
		end
	end
	]]
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
	if message_id == hash("collision_response") then
		print("hitknife collision!!!!")
		print(message.group)
	end
	
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
